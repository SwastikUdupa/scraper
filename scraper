#!/bin/bash

scriptname=$0   # $0 is the name of the program

usage () {
   cat <<EOF
Usage: $scriptname [-o] [-a] [-d] [-D] [-c] [-r] [-p] [-H] [-h] [-w] "movie name"
   -a   Lead actor and Actress
   -c   Cast
   -d   Duration
   -D   Director
   -h   Help
   -H   History of previous searches by the user
   -o   Overview(Actor,Actress,Ratings,Director and Plot)
   -p   Download the poster
   -s   Summary of the movie
   -r   Rating
   -w   Movies in theatres this week
   
EOF
   exit 0
}
urlColor="\033[91m"
getUrl() #this is used to get the url of the first movie in the suggestions of imdb  based on your input
{
	url_first_part="http://www.imdb.com/find?ref_=nv_sr_fn&q="
	url_last_part="&s=all"
	url="${url_first_part}${OPTARG}${url_last_part}" #the flower brackets are used for space protection
	wget "${url}" -q -O ~/movie_list #to save the page source of movie suggestions in a local file called movie_list
	result=$(grep -zPo -m 1 '(?<=<h1 class="findHeader">)\K.*?(?=<span class="findSearchTerm">)'  ~/movie_list|head -1)
	cmpText="No results found for "
	if [ "$result" = "$cmpText" ]
	then
		check=0;
	        echo "Sorry.No results were found."
		rm ~/movie_list
	else
		check=1;
		titleId=$(grep -Po -m 1 "(?<=td class=\"primary_photo\"> <a href=\").*?(?=\s*ref_=fn_al_tt_1\")" ~/movie_list|head -1) 
		part_to_be_added="ref_=fn_al_tt_1"
		final_url="www.imdb.com$titleId$part_to_be_added"
		rm ~/movie_list #deleting the movie list since we dont need it anymore
	fi
}

getSummary()
{
	wget "${final_url}" -q -O ~/movie_local
	summary=$(grep -zPo '<div class="summary_text" itemprop="description">\s*\K.*?(?=\s*</div>)' ~/movie_local) #z option is added to include multi line functionality for grep
	echo "Summary:"
	echo "$summary"
	rm ~/movie_local
}
getDuration()
{
	wget "${final_url}" -q -O ~/movie_local 
	duration=$(grep -zPo '(?<=<time itemprop="duration" datetime=").*?>\K.*?(?=</time>)'  ~/movie_local)
	echo -n "Duration: "
	echo "$duration"
	rm ~/movie_local
}
getDirector()
{
	wget "${final_url}" -q -O ~/movie_local 
	director=$(grep -zPo '(?<=<meta name="description" content="Directed by )\K.*?(?=\. )'  ~/movie_local)
	echo -n "Director: "
	echo "$director"
	rm ~/movie_local
}
getPoster()
{
	wget "${final_url}" -q -O ~/movie_local 
	poster=$(grep -zPo -m 1 '(?<=src="https://images-na\.ssl-images-amazon\.com/images/M)\K.*?(?=jpg)'  ~/movie_local|head -1)
	url_first_part="https://images-na.ssl-images-amazon.com/images/M"
	url_last_part="jpg"
	image_url="$url_first_part$poster$url_last_part"
	folder_name="${OPTARG}"
	mkdir ~/"${folder_name}"
	wget -q "${image_url}" -O ~/"${folder_name}"/"${folder_name}"Poster.jpg
	echo "Download complete"
	rm ~/movie_local
}
getRating()
{
	wget "${final_url}" -q -O ~/movie_local 
	rating=$(grep -zPo '(?<=<strong title=")\K.*?(?= based on)'  ~/movie_local)
	echo "Imdb Rating: "
	echo "$rating"
	rm ~/movie_local
}
getMovies()
{
	wget "http://www.imdb.com/movies-in-theaters/" -q -O ~/movie_local 
	movies=$(grep -zPo '(?<=alt=")\K.*?(?= Poster)'  ~/movie_local)
	echo "Movies in theatres this week: "
	echo "$movies"
	rm ~/movie_local
}
getActor()
{
	wget "${final_url}" -q -O ~/movie_local 
	actor=$(grep -zPo '(?<=<meta name="description" content="Directed by ).* With\K.*?(?=\.)'  ~/movie_local)
	echo -n "Actors: "
	echo "$actor"
	rm ~/movie_local
}
getCast()
{
	wget "${final_url}" -q -O ~/movie_local 
	cast=$(grep -zPo '(?<=><img height="44" width="32" alt=")\K.*?(?=" title)'  ~/movie_local)
	echo "Cast: "
	echo "$cast"
	rm ~/movie_local
}
getOverview()
{
	color="\033[92m"
	wget "${final_url}" -q -O ~/movie_local 
	title=$(grep -zPo '(?<=<title>)\K.*?(?= \()'  ~/movie_local)
	echo "${color}Title\t\t:\033[96m$title"
	year=$(grep -zPo '(?<=<title>).*?\(\K.*?(?=\))'  ~/movie_local)
	echo "${color}Year\t\t:\033[96m$year"
	rating=$(grep -zPo '(?<=<strong title=")\K.*?(?= based on)'  ~/movie_local)
	echo "${color}Rating\t\t:\033[96m$rating/10"
	director=$(grep -zPo '(?<=<meta name="description" content="Directed by )\K.*?(?=\. )'  ~/movie_local)
	echo -n "${color}Director\t:\033[96m$director\n"
	actor=$(grep -zPo '(?<=<meta name="description" content="Directed by ).* With \K.*?(?=\.)'  ~/movie_local)
	echo -n "${color}Cast\t\t:\033[96m$actor\n"
	summary=$(grep -zPo '<div class="summary_text" itemprop="description">\s*\K.*?(?=\s*</div>)' ~/movie_local)
	echo "${color}Plot\t\t:\n\n\033[96m$summary\n"
	echo "${color}Imdb movie URL\t:$urlColor$final_url"
	rm ~/movie_local
}
getHistory()
{
	cat ~/movie_history.txt
}
lives=3
score=0
playGame()
{
	clear
	echo -e "Current score:$score\t\tLives remaining:$lives"
	echo ""
	movie=$(sort --random-sort ~/gamemovielist | head -n 1)
	lcmovie=$(echo "$movie" | tr '[:upper:]' '[:lower:]')
	lcmovie2=$(echo "$lcmovie" | tr -d ' ')
	url_first_part="http://www.imdb.com/find?ref_=nv_sr_fn&q="
	url_last_part="&s=all"
	url="${url_first_part}${movie}${url_last_part}"
	wget "${url}" -q -O ~/movie_list
	titleId=$(grep -Po -m 1 "(?<=td class=\"primary_photo\"> <a href=\").*?(?=\s*ref_=fn_al_tt_1\")" ~/movie_list|head -1) 
	part_to_be_added="ref_=fn_al_tt_1"
	final_url="www.imdb.com$titleId$part_to_be_added"
	rm ~/movie_list
	wget "${final_url}" -q -O ~/movie_local 
	director=$(grep -zPo '(?<=<meta name="description" content="Directed by )\K.*?(?=\. )'  ~/movie_local)
	actor=$(grep -zPo '(?<=<meta name="description" content="Directed by ).* With\K.*?(?=\. )'  ~/movie_local)
	summary=$(grep -zPo '<div class="summary_text" itemprop="description">\s*\K.*?(?=\s*</div>)' ~/movie_local)
	rm ~/movie_local
	flag=0
	echo "Clue 1:Director of the movie is ${director}"
	echo ""
	echo -n "Your guess: "
	read guess
	guess2=$(echo "$guess" | tr -d ' ')
	if [ "$guess2" == "$lcmovie2" ]
	then
		flag=1
		echo "Right guess! The movie is $movie"
		echo ""
		score=$(($score+50))
		sleep 5
	else
		echo -e "Sorry.Wrong guess\n"
		if [[ $flag -eq 0 ]]
		then
			echo "Clue 2:Actors in the movie are $actor"
			echo ""
			echo -n "Your guess: "
			read guess
			guess2=$(echo "$guess" | tr -d ' ')
			if [[ "$guess2" == "$lcmovie2" ]]
			then
				echo "Right guess! The movie is $movie"
				echo ""
				score=$(($score+30))
				sleep 5
			else
				echo -e "Sorry.Wrong guess\n"
				if [[ $flag -eq 0 ]]
				then
					echo "Clue 3:Plot of the movie is ${summary}"
					echo ""
					echo -n "Your guess: "
					read guess
					guess2=$(echo "$guess" | tr -d ' ')
					if [[ "$guess2" == "$lcmovie2" ]]
					then
						echo "Right guess! The movie is ${movie}"
						echo ""
						score=$(($score+10))
						sleep 5
					else
						echo -e "Sorry.Wrong guess\n"
						echo "The movie was $lcmovie"
						lives=$(($lives-1))
						sleep 5
					fi
				fi
			fi
		fi
	fi
	if [ $lives -eq 0 ]
	then
		echo "Game over!"
		echo ""
		echo -n "Do you want to restart?(Y/n)"
		read response
			if [ "$response" == "Y" ]
			then
				lives=3
				score=0
				playGame
			fi
	elif [ $lives -gt 0 ]
	then
		playGame
	fi
}


unset flag #this is to unset the value of flag if it had any value previously
while getopts ":a:c:d:D:hHgo:p:r:s:w" opt
do
	
	case $opt in
	    a)
	      movie="${OPTARG}"
	      getUrl
	      if [ $check -eq 1 ]
	      then
		      getActor
	      fi
	      echo "${OPTARG}" >> ~/movie_history.txt
	      flag='1'
	      ;;
	    c)
              getUrl
	      if [ $check -eq 1 ]
	      then
		      getCast
	      fi
	      flag='1'
 	      echo "${OPTARG}" >> ~/movie_history.txt

	      ;;
            d)
              getUrl
	      if [ $check -eq 1 ]
	      then
		      getDuration
	      fi
	      flag='1'
 	      echo "${OPTARG}" >> ~/movie_history.txt

	      ;;
	    D)
              getUrl
	      if [ $check -eq 1 ]
	      then
		      getDirector
	      fi
	      flag='1'
 	      echo "${OPTARG}" >> ~/movie_history.txt
	      ;;
	    g)echo -e "The rules of the game are as follows:\n1.The player has to name the movie based on the clues given.The clues are given one at a time\n2.The answers are space and case insensitive but beware of \"THE\"\n3.The scoring scheme:If answered at 1st clue:50 points\nIf answered at the 2nd clue:30 points\nIf answered at third clue:10 points\n4.If player is unable to answer a movie he loses one of his three lives\nDo you want to play?(Y/n)"
	      read response
	      if [ "$response" == "Y" ]
	      then
		      playGame
	      fi
	      flag='1'
	      ;;
            h)usage
              flag='1'
	      ;;
            H)
              getHistory
              flag='1'
	      ;;
            o)
              getUrl
	      if [ $check -eq 1 ]
	      then
		      getOverview
	      fi
	      flag='1'
 	      echo "${OPTARG}" >> ~/movie_history.txt
	      ;;
            p)
              getUrl
	      if [ $check -eq 1 ]
              then
		      getPoster
	      fi
	      flag='1'
 	      echo "${OPTARG}" >> ~/movie_history.txt
	      ;;
            r)
              getUrl
	      if [ $check -eq 1 ]
	      then
		      getRating
	      fi
	      flag='1'
 	      echo "${OPTARG}" >> ~/movie_history.txt
	      ;;
            s)
              getUrl
	      if [ $check -eq 1 ]
              then
	              getSummary
	      fi
	      flag='1'
 	      echo "${OPTARG}" >> ~/movie_history.txt
              ;;
            w)
              getMovies
              flag='1'
	      ;;
	    \?)
	      echo "Invalid option: -$OPTARG"
              flag='1'
	      usage
	      ;;
	    :)
 	      echo "Option -$OPTARG requires an argument."
              usage
	      flag='1'
	      ;;
	  esac
done
if [ -z "$flag" ] #Here we check if an option was passed or not
then
	echo "No options were passed"
	usage
fi
